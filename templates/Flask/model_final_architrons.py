# -*- coding: utf-8 -*-
"""Model Final Architrons.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bXWjCvaqqt6dWkuL24x93Y0JhXNo3ZSY
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import LabelEncoder
import joblib

# Load the dataset
data = pd.read_csv('Flask/Dataset_Proyek_Rumah.csv')

# Identify categorical columns
categorical_cols = ['Tipe Rumah', 'Tipe Atap', 'Tipe Dinding', 'Tipe Pondasi', 'Material Utama']  # Adjust based on your columns

# Initialize LabelEncoder for each categorical column
label_encoders = {col: LabelEncoder() for col in categorical_cols}

# Apply encoding
for col in categorical_cols:
    data[col] = label_encoders[col].fit_transform(data[col])

# Convert 'Biaya Proyek (Rp)' to numeric after removing non-numeric characters
data['Biaya Proyek (Rp)'] = data['Biaya Proyek (Rp)'].replace('[Rp.,]', '', regex=True).astype(float)

# Prepare the data
X = data[['Tipe Rumah', 'Luas Tanah (m²)', 'Luas Bangunan (m²)', 'Jumlah Lantai', 'Jumlah Kamar Tidur','Jumlah Kamar Mandi','Tipe Atap','Tipe Dinding','Tipe Pondasi','Material Utama','Jumlah Tenaga Kerja']]
y_cost = data['Biaya Proyek (Rp)']
y_duration = data['Durasi (Hari)']

# Split the data into training and testing sets
X_train, X_test, y_train_cost, y_test_cost = train_test_split(X, y_cost, test_size=0.2, random_state=42)
X_train, X_test, y_train_duration, y_test_duration = train_test_split(X, y_duration, test_size=0.2, random_state=42)

# Train Random Forest Regressor for Cost Prediction
rf_cost_model = RandomForestRegressor(random_state=42, n_estimators=100, min_samples_split= 10, min_samples_leaf= 1, max_depth= 10, bootstrap= True)
rf_cost_model.fit(X_train, y_train_cost)

# Predict and evaluate
cost_pred = rf_cost_model.predict(X_test)
cost_mse = mean_squared_error(y_test_cost, cost_pred)
print(f'Random Forest MSE for Cost Prediction: {cost_mse}')

# Train Random Forest Regressor for Duration Prediction
rf_duration_model = RandomForestRegressor(random_state=42, n_estimators=100, min_samples_split= 10, min_samples_leaf= 2, max_depth= 10, bootstrap= True)
rf_duration_model.fit(X_train, y_train_duration)

# Predict and evaluate
duration_pred = rf_duration_model.predict(X_test)
duration_mse = mean_squared_error(y_test_duration, duration_pred)
print(f'Random Forest MSE for Duration Prediction: {duration_mse}')

# Save the trained models
joblib.dump(rf_cost_model, 'rf_cost_model.pkl')
joblib.dump(rf_duration_model, 'rf_duration_model.pkl')

from os import device_encoding
import joblib

# Load the trained models
rf_cost_model = joblib.load('rf_cost_model.pkl')
rf_duration_model = joblib.load('rf_duration_model.pkl')

def get_user_input():
    print("Silakan masukkan detail proyek anda:")

    tipe_rumah = int(input("Tipe Rumah: "))
    luas_tanah = int(input("\nLuas Tanah (m²): "))
    luas_bangunan = int(input("\nLuas Bangunan (m²): "))
    jumlah_lantai = int(input("\nJumlah Lantai: "))
    jumlah_kamar_mandi = int(input("\nJumlah Kamar Mandi: "))
    jumlah_kamar = int(input("\nJumlah Kamar Tidur: "))
    tipe_atap = int(input("\nTipe Atap:\nSeng (3)\nGenteng Beton (5)\nGenteng Keramik (7)\nMasukkan Tipe: "))
    tipe_dinding = int(input("\nTipe Dinding:\nBata Merah (0)\nBatako (3)\nBata Rinngan (1)\nMasukkan Tipe: "))
    tipe_pondasi = int(input("\nTipe Pondasi:\nBeton (3)\nBatu Kali (0)\nCakar Ayam (4)\nMasukkan Tipe: "))
    material_utama = int(input("\nMaterial Utama:\nKayu (3)\nBesi (1)\nBeton (2)\nBaja (0)\nMasukkan Tipe: "))
    jumlah_tenaga_kerja = int(input("\nJumlah Tenaga Kerja: "))


    # Combine the input into a list for prediction
    new_project_data = [[tipe_rumah, luas_tanah, luas_bangunan, jumlah_lantai, jumlah_kamar_mandi, jumlah_kamar, tipe_atap, tipe_dinding, tipe_pondasi, material_utama, jumlah_tenaga_kerja]]
    return new_project_data

def predict_project_cost_and_duration(data):
    # Predict the cost
    predicted_cost = rf_cost_model.predict(data)
    print(f'\nPrediksi Biaya Proyek: Rp.{predicted_cost[0]:,.2f}')

    # Predict the duration
    predicted_duration = rf_duration_model.predict(data)
    print(f'Prediksi Durasi Proyek: {predicted_duration[0]:.2f} hari')

# Main function to execute the pipeline
if __name__ == "__main__":
    # Get user input
    new_project_data = get_user_input()

    # Make predictions
    predict_project_cost_and_duration(new_project_data)